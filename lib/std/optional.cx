public:

enum union optional<T> {
    Some(T),
    None
}

bool optional<T>::is_some(this) {
    return *this is Some;
}

optional<U> optional::map<T, U>(this, optional<U> (*func)(T value)) {
    if opt is Some(T value) {
        return func(value);
    }

    return None;
}

T optional::or_else<T>(this, T otherwise) {
    if opt is Some(T value) {
        return value;
    }

    return otherwise;
}