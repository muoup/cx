#include <stdlib.h>

public:

template <T : type>
struct vector {
    T* data;
    usize length;
    usize capacity;
};

template <T : type>
vector<T> create_vector() {
    return (vector<T>) {
        .data = malloc(4 * sizeof(T)),
        .length = 0,
        .capacity = 4
    };
}

template <T : type>
vector<T> create_vector_with_capacity(usize capacity) {
    return (vector<T>) {
        .data = malloc(capacity * sizeof(T)),
        .length = 0,
        .capacity = capacity
    };
}

template <T : type>
void vector<T>::push(this, T object) {
    if (this.length == this.capacity) {
        this.capacity = this.capacity * 2 + 1;
        this.data = realloc(this.data, this.capacity * sizeof(T));
    }

    this.data[this.length] = object;
    this.length++;
}

template <T : type>
T* vector<T>::at(this, usize index) {
    if (index >= this.length) {
        return NULL;
    }

    return &this.data[index];
}