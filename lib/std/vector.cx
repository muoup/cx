#include <stdlib.h>

public:

struct vector<T> {
    T* data;
    usize length;
    usize capacity;
};

vector<T> create_vector<T>() {
    return (vector<T>) {
        .data = malloc(4 * sizeof(T)),
        .length = 0,
        .capacity = 4
    };
}

vector<T> create_vector_with_capacity<T>(usize capacity) {
    return (vector<T>) {
        .data = malloc(capacity * sizeof(T)),
        .length = 0,
        .capacity = capacity
    };
}

void vector<T>::push<T>(this, T object) {
    if (this.length == this.capacity) {
        this.capacity = this.capacity * 2 + 1;
        this.data = realloc(this.data, this.capacity * sizeof(T));
    }

    this.data[this.length] = object;
    this.length++;
}

T* vector<T>::at<T>(this, usize index) {
    if (index >= this.length) {
        return NULL;
    }

    return &this.data[index];
}